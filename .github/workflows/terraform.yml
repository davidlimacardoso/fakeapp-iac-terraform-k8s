name: Terraform Plan & Apply

on:
  pull_request:
    branches:
      - main
      - stage
      - develop
    paths:
      - terraform/**
      - k8s/**
  issue_comment:
    types: [created]

  env:
    AWS_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.AWS_ROLE }}
    AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  
  plan:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: read

    env:
      ENV: ${{ github.base_ref == 'main' && 'prod' || github.base_ref == 'stage' && 'stg' || github.base_ref == 'develop' && 'dev' }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate in the AWS
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: "${{ env.AWS_ROLE }}"
          aws-region: "${{ env.AWS_REGION }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check
   
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Workspace
        id: workspace
        run: |
          terraform workspace select ${{ env.ENV }} || terraform workspace new ${{ env.ENV }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file=${{ env.ENV }}.tfvars -out=planfile > plan_output.txt
        continue-on-error: true
 
      - name: Upload Plan File
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform/planfile

      - name: Hide Previous Comments
        uses: kanga333/comment-hider@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment Plan Output
        uses: actions/github-script@v6
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planOutput = fs.readFileSync('./terraform/plan_output.txt', 'utf8');

            const lines = planOutput.split('\n');
            const modifiedLines = lines.map(line => {
                // Analize if line start with this signals: '+', '-' ou '~'
                const trimmedLine = line.trim();
                if (trimmedLine.startsWith('+') || trimmedLine.startsWith('-') || trimmedLine.startsWith('~')) {
                    // Capture the sihnal
                    const sign = trimmedLine[0];
                    // Remove the sign and the first space, then add the corresponding sign at the beginning
                    let newLine = line.replace(/^[+\-~]\s*/, ' ').replace(/^ /, sign === '~' ? '! ' : sign + ' ');
                    return newLine;
                }
                return line;
            });

            // Merge modified lines into a single string
            planOutput = modifiedLines.join('\n');

            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Workspace ðŸ¤–\`${{ steps.workspace.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
  
            \`\`\`diff
            ${planOutput}
            \`\`\`
  
            </details>
            
            \:rocket\: To apply this plan, run this command\: \`\/apply\`

            \n
  
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply:
  
    if: >
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/apply')

    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write  
      contents: write
      id-token: write

    env:
      ENV: ${{ github.base_ref == 'main' && 'prod' || github.base_ref == 'stage' && 'stg' || github.base_ref == 'develop' && 'dev' }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
        
    steps:

      - name: Notify Applying Settings
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = "\>\:rocket\: Applying the settings... Please wait...";
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Plan File
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform/

      - name: Authenticate in the AWS
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: "${{ env.AWS_ROLE }}"
          aws-region: "${{ env.AWS_REGION }}"
                        
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Refresh
        run: rm -rf .terraform

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color -input=false -var-file=${{ env.ENV }}.tfvars -parallelism=1 ./terraform/planfile
        continue-on-error: true

      - name: Comment Apply Output
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const command = context.payload.comment.body;
            const outcome = "${{ steps.apply.outcome }}";
            const emoji = outcome === 'failure' ? ':x:' : ':white_check_mark:';
            const output = `#### Terraform Apply Output \`${outcome}\` ${emoji}
            \`\`\`\n
            ${{ steps.apply.outputs.stdout }} 
            ${{ steps.apply.outputs.stderr }}
            \`\`\`
            *Executed by: @${{ github.actor }}, Terraform command: \`${command}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      # - name: Merge Pull Request
      #   if: steps.apply.outcome == 'success'
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       await github.rest.pulls.merge({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.issue.number,
      #         merge_method: 'merge'
      #       });

      - name: Hide Previous Comments
        if: steps.apply.outcome != 'success'
        uses: kanga333/comment-hider@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}